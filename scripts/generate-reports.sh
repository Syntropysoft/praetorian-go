#!/bin/bash

# 🛡️ Praetorian Go - Report Generator Script
# Generates mutation testing and code coverage reports

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
REPORTS_DIR="$PROJECT_ROOT/reports"
MUTATION_DIR="$REPORTS_DIR/mutation"
COVERAGE_DIR="$REPORTS_DIR/coverage"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_header() {
    echo -e "${CYAN}🛡️  $1${NC}"
}

# Guard clauses
check_requirements() {
    log_info "Checking requirements..."
    
    if ! command -v go &> /dev/null; then
        log_error "Go is not installed or not in PATH"
        exit 1
    fi
    
    if ! command -v go-mutesting &> /dev/null; then
        log_error "go-mutesting is not installed. Install with: go install github.com/zimmski/go-mutesting/...@latest"
        exit 1
    fi
    
    log_success "All requirements satisfied"
}

create_directories() {
    log_info "Creating report directories..."
    
    mkdir -p "$MUTATION_DIR" "$COVERAGE_DIR"
    
    log_success "Directories created"
}

run_tests() {
    log_info "Running all tests..."
    
    cd "$PROJECT_ROOT"
    
    if ! go test ./... -v; then
        log_error "Tests failed"
        exit 1
    fi
    
    log_success "All tests passed"
}

generate_coverage() {
    log_info "Generating code coverage report..."
    
    cd "$PROJECT_ROOT"
    
    # Generate coverage profile
    go test -coverprofile="$COVERAGE_DIR/coverage.out" ./...
    
    # Generate HTML report
    go tool cover -html="$COVERAGE_DIR/coverage.out" -o "$COVERAGE_DIR/coverage.html"
    
    # Generate coverage summary
    go tool cover -func="$COVERAGE_DIR/coverage.out" > "$COVERAGE_DIR/coverage-summary.txt"
    
    log_success "Coverage report generated: $COVERAGE_DIR/coverage.html"
}

generate_mutation_report() {
    log_info "Generating mutation testing report..."
    
    cd "$PROJECT_ROOT"
    
    local target_file="internal/adapters/parsers/common.go"
    local report_file="$MUTATION_DIR/mutation-report-$TIMESTAMP.txt"
    
    # Generate mutation report
    go-mutesting --verbose --do-not-remove-tmp-folder "$target_file" > "$report_file" 2>&1
    
    # Extract mutation score
    local mutation_score=$(grep "mutation score" "$report_file" | tail -1 || echo "No score found")
    
    log_success "Mutation report generated: $report_file"
    log_info "Mutation Score: $mutation_score"
}

generate_summary() {
    log_info "Generating summary report..."
    
    local summary_file="$REPORTS_DIR/summary-$TIMESTAMP.md"
    
    cat > "$summary_file" << EOF
# 🛡️ Praetorian Go - Test Reports Summary

**Generated:** $(date)
**Project:** Praetorian Go CLI

## 📊 Code Coverage

- **Report:** [coverage.html]($(basename "$COVERAGE_DIR/coverage.html"))
- **Profile:** [coverage.out]($(basename "$COVERAGE_DIR/coverage.out"))
- **Summary:** [coverage-summary.txt]($(basename "$COVERAGE_DIR/coverage-summary.txt"))

## 🧬 Mutation Testing

- **Report:** [mutation-report-$TIMESTAMP.txt]($(basename "$MUTATION_DIR/mutation-report-$TIMESTAMP.txt"))

## 🎯 Quick Stats

\`\`\`
$(go tool cover -func="$COVERAGE_DIR/coverage.out" | tail -1)
$(grep "mutation score" "$MUTATION_DIR/mutation-report-$TIMESTAMP.txt" | tail -1 || echo "No mutation score available")
\`\`\`

## 📁 Report Files

- **Coverage HTML:** \`$COVERAGE_DIR/coverage.html\`
- **Coverage Profile:** \`$COVERAGE_DIR/coverage.out\`
- **Coverage Summary:** \`$COVERAGE_DIR/coverage-summary.txt\`
- **Mutation Report:** \`$MUTATION_DIR/mutation-report-$TIMESTAMP.txt\`

---
*Generated by Praetorian Go Report Generator*
EOF
    
    log_success "Summary report generated: $summary_file"
}

open_reports() {
    if [[ "${1:-}" == "--open" ]]; then
        log_info "Opening reports in browser..."
        
        if command -v open &> /dev/null; then
            open "$COVERAGE_DIR/coverage.html"
        elif command -v xdg-open &> /dev/null; then
            xdg-open "$COVERAGE_DIR/coverage.html"
        else
            log_warning "Cannot open browser automatically. Open manually: $COVERAGE_DIR/coverage.html"
        fi
    fi
}

show_usage() {
    cat << EOF
🛡️ Praetorian Go - Report Generator

Usage: $0 [OPTIONS]

Options:
    --open      Open coverage report in browser after generation
    --help      Show this help message

Examples:
    $0                    # Generate all reports
    $0 --open            # Generate reports and open coverage in browser

Reports will be generated in:
    - Coverage: $COVERAGE_DIR/
    - Mutation: $MUTATION_DIR/
    - Summary: $REPORTS_DIR/

EOF
}

# Main execution
main() {
    log_header "Praetorian Go - Report Generator"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --open)
                OPEN_REPORTS=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Execute pipeline
    check_requirements
    create_directories
    run_tests
    generate_coverage
    generate_mutation_report
    generate_summary
    open_reports "${OPEN_REPORTS:-}"
    
    log_header "🎉 All reports generated successfully!"
    log_info "Reports location: $REPORTS_DIR"
}

# Execute main function
main "$@"
